class node:
  def __init__(self,value,next=None):
    self.value = value
    self.next = next

class singlyLinkedList:

  def __init__(self):
    self.head = None
    self.tail = None

  def add_first(self,value):
    new_node = node(value)
    if self.head is None:
      self.head = new_node
    else:
      new_node.next = self.head
      self.head = new_node

  def add_last(self,value):
    new_node = node(value)
    self.tail.next = new_node
    self.tail = new_node

  def inBetween_after(self,value,x):
    n = self.head
    while n is not None:
      if x == n.value:
        break
      n = n.next
    if n is None:
      print("The node was not found, please check and try again")
    else:
      new_node = node(value)
      new_node.next = n.next 
      n.next = new_node

  def inBetween_before(self,value,x):
    if self.head is None:
      print("The linked list is empty")
    if x == self.head.value:
      new_node = node(value)
      new_node.next = self.head
      self.head = new_node
    else:
      n = self.head
      while n is not None:
        if x == n.next.value:
          break
        n = n.next
      if n is None:
        print("The node was not found")
      else:
        new_node = node(value)
        new_node.next = n.next
        n.next = new_node

  def insert_empty(self,value):
    if self.head is None:
      new_node = node(value)
      self.head = new_node
    else:
      print("The linked list is not empty")

  def delete_first(self):
    if self.head is None:
      print("The linked list is empty")
    else:
      self.head = self.head.next

  def delete_any(self,target):
    if self.head is None:
      print("The linked list is empty")
    else:
      currentnode = self.head
      while currentnode.next is not None:
        if currentnode.next.value == target:
          currentnode.next = currentnode.next.next
        else:
          currentnode = currentnode.next
    if self.head.value == target:
      self.head = self.head.next

      
        
    
  def printList(self):
    if self.head is None:
      print(None)
    else:
      currentNode = self.head
      while True:
        print(currentNode.value,"-->",end=" ")
        if currentNode.next == None:
          print(None)
          break
        else:
          currentNode = currentNode.next 

sll = singlyLinkedList()


"""Implementation"""
# node1 = node(1)
# node2 = node(200)
# node3 = node(4000)


# sll.head = node1
# node1.next = node2
# node2.next = node3
# sll.tail = node3

# sll.add_first(0)
# sll.add_last(10000)
# sll.inBetween_before(150,200)

# sll.delete_any(200)




sll.printList() #traverse throught the linked list while printing the values
